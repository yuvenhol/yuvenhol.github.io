<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>interview on yuvenhol的技术苦旅</title>
    <link>https://yuvenhol.github.io/interview/</link>
    <description>Recent content in interview on yuvenhol的技术苦旅</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="https://yuvenhol.github.io/interview/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>面试题整理</title>
      <link>https://yuvenhol.github.io/interview/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yuvenhol.github.io/interview/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</guid>
      <description>Redis 缓存雪崩、缓存击穿、缓存穿透的概念和解决方案 缓存雪崩： 描述： 大量缓存集中失效，查询数据量很大，引起数据库压力过大。 解决方案：
缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。 设置热点数据永远不过期。 缓存击穿： 描述: 缓存击穿是指缓存中没有但数据库中有的数据（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力 解决方案：
设置热点数据永远不过期。 加互斥锁，解锁后重入。 缓存穿透： 描述 大量访问数据库中不存在缓存中也不存在的数据，导致数据库压力过大，也是攻击的一种手段。 解决方案：
接口层增加校验，如用户鉴权校验，id做基础校验，id&amp;lt;=0的直接拦截； 从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null，缓存有效时间可以设置短点，如30秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个id暴力攻击 如何实现接口幂等 token方式 先下发token，完成之后再清除token
乐观锁 基于乐观锁来控制版本
分布式事务 1、2pc
死锁 如果在一个系统中以下四个条件同时成立，那么就能引起死锁：
互斥：至少有一个资源必须处于非共享模式，即一次只有一个进程可使用。如果另一进程申请该资源，那么申请进程应等到该资源释放为止。 占有并等待：—个进程应占有至少一个资源，并等待另一个资源，而该资源为其他进程所占有。 非抢占：资源不能被抢占，即资源只能被进程在完成任务后自愿释放。 循环等待：有一组等待进程 {P0，P1，…，Pn}，P0 等待的资源为 P1 占有，P1 等待的资源为 P2 占有，……，Pn-1 等待的资源为 Pn 占有，Pn 等待的资源为 P0 占有。 解决死锁： 1、打破四个必要条件之一即可，比如检测是否会产生循环，长时间获取不到资源就失败等等 2、在产生死锁后，检测然后回复。
大多数程序都不会考虑死锁问题</description>
    </item>
  </channel>
</rss>