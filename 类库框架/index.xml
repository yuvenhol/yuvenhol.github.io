<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>类库&amp;框架 on yuvenhol的技术苦旅</title>
    <link>https://yuvenhol.github.io/%E7%B1%BB%E5%BA%93%E6%A1%86%E6%9E%B6/</link>
    <description>Recent content in 类库&amp;框架 on yuvenhol的技术苦旅</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="https://yuvenhol.github.io/%E7%B1%BB%E5%BA%93%E6%A1%86%E6%9E%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>mybatis</title>
      <link>https://yuvenhol.github.io/%E7%B1%BB%E5%BA%93%E6%A1%86%E6%9E%B6/mybatis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yuvenhol.github.io/%E7%B1%BB%E5%BA%93%E6%A1%86%E6%9E%B6/mybatis/</guid>
      <description>jdbc方式 @Test public void test() throws SQLException { Connection conn=null; PreparedStatement pstmt=null; try { // 1.加载驱动 //Class.forName(&amp;#34;com.mysql.jdbc.Driver&amp;#34;); // 2.创建连接 conn= DriverManager. // SPI ,mysql Driver Connector，的META-INF.services下会有 java.sql.Driver 的实现类 getConnection(&amp;#34;jdbc:mysql://localhost:3306/mybatis_example&amp;#34;, &amp;#34;root&amp;#34;, &amp;#34;123456&amp;#34;); // 开启事务 conn.setAutoCommit(false); // SQL语句 参数#{} ${} &amp;lt;if&amp;gt; String sql=&amp;#34; select id,user_name,create_time from t_user where id=?;&amp;#34;; // 获得sql执行者 ： // 1. 执行预处理 pstmt=conn.prepareStatement(sql); pstmt.setInt(1,1); // 执行查询 pstmt.execute(); ResultSet rs= pstmt.getResultSet(); //ResultSet rs= pstmt.executeQuery(); rs.next(); User user =new User(); user.setId(rs.getLong(&amp;#34;id&amp;#34;)); user.</description>
    </item>
    <item>
      <title>sentinel</title>
      <link>https://yuvenhol.github.io/%E7%B1%BB%E5%BA%93%E6%A1%86%E6%9E%B6/sentinel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yuvenhol.github.io/%E7%B1%BB%E5%BA%93%E6%A1%86%E6%9E%B6/sentinel/</guid>
      <description>简介 Sentinel 是面向分布式、多语言异构化服务架构的流量治理组件，主要以流量为切入点，从流量路由、流量控制、流量整形、熔断降级、系统自适应过载保护、热点流量防护等多个维度来帮助开发者保障微服务的稳定性。
Sentinel 基本概念 资源 资源是 Sentinel 的关键概念。它可以是 Java 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。在接下来的文档中，我们都会用资源来描述代码块。
只要通过 Sentinel API 定义的代码，就是资源，能够被 Sentinel 保护起来。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。
规则 围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。
Sentinel 功能和设计理念 流量控制 流量控制有以下几个角度:
资源的调用关系，例如资源的调用链路，资源和资源之间的关系； 运行指标，例如 QPS、线程池、系统负载等； 控制的效果，例如直接限流、冷启动、排队等。 Sentinel 的设计理念是让您自由选择控制的角度，并进行灵活组合，从而达到想要的效果。
熔断降级 什么是熔断降级 除了流量控制以外，降低调用链路中的不稳定资源也是 Sentinel 的使命之一。由于调用关系的复杂性，如果调用链路中的某个资源出现了不稳定，最终会导致请求发生堆积。
Sentinel 和 Hystrix 的原则是一致的: 当调用链路中某个资源出现不稳定，例如，表现为 timeout，异常比例升高的时候，则对这个资源的调用进行限制，并让请求快速失败，避免影响到其它的资源，最终产生雪崩的效果。
熔断降级设计理念 Sentinel 对这个问题采取了两种手段:
通过并发线程数进行限制 和资源池隔离的方法不同，Sentinel 通过限制资源并发线程的数量，来减少不稳定资源对其它资源的影响。这样不但没有线程切换的损耗，也不需要您预先分配线程池的大小。当某个资源出现不稳定的情况下，例如响应时间变长，对资源的直接影响就是会造成线程数的逐步堆积。当线程数在特定资源上堆积到一定的数量之后，对该资源的新请求就会被拒绝。堆积的线程完成任务后才开始继续接收请求。
通过响应时间对资源进行降级 除了对并发线程数进行控制以外，Sentinel 还可以通过响应时间来快速降级不稳定的资源。当依赖的资源出现响应时间过长后，所有对该资源的访问都会被直接拒绝，直到过了指定的时间窗口之后才重新恢复。
系统负载保护 Sentinel 同时提供系统维度的自适应保护能力。防止雪崩，是系统防护中重要的一环。当系统负载较高的时候，如果还持续让请求进入，可能会导致系统崩溃，无法响应。在集群环境下，网络负载均衡会把本应这台机器承载的流量转发到其它的机器上去。如果这个时候其它的机器也处在一个边缘状态的时候，这个增加的流量就会导致这台机器也崩溃，最后导致整个集群不可用。
针对这个情况，Sentinel 提供了对应的保护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求。
开源框架适配 web servlet: CommonFilter dubbo http client 等等 https://sentinelguard.io/zh-cn/docs/open-source-framework-integrations.html 控制台 Sentinel 提供一个轻量级的开源控制台，它提供机器发现以及健康情况管理、监控（单机和集群），规则管理和推送的功能。这里，我们将会详细讲述如何通过简单的步骤就可以使用这些功能。 引入JAR包 客户端需要引入 Transport 模块来与 Sentinel 控制台进行通信。您可以通过 pom.</description>
    </item>
  </channel>
</rss>